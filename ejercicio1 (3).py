# -*- coding: utf-8 -*-
"""Ejercicio1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1N2O2wBGgnrEFeN8jgcSYDkZBTEkKAQV8
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

def gauss_jordan_pivot_determinante(A, b):
    """
    Resuelve un sistema de ecuaciones Ax = b mediante el método de Gauss-Jordan con pivoteo parcial
    e imprime el determinante de A para verificar si el sistema tiene solución única.
    """
    n = len(A)
    # Matriz aumentada
    Ab = np.hstack([A, b.reshape(-1, 1)]).astype(float)

    # Cálculo del determinante de A
    det_A = np.linalg.det(A)

    # Verificar si el sistema es determinado o indeterminado
    if np.isclose(det_A, 0):
        print(f"Determinante de A: {det_A:.5f}. El sistema es indeterminado o no tiene solución única.")
        return None

    print(f"Determinante de A: {det_A:.5f}. El sistema tiene solución única.")

    # Aplicación del método de Gauss-Jordan con pivoteo
    for i in range(n):
        # Pivoteo parcial
        max_row = np.argmax(abs(Ab[i:, i])) + i
        if i != max_row:
            Ab[[i, max_row]] = Ab[[max_row, i]]

        # Normalización de la fila pivote
        Ab[i] = Ab[i] / Ab[i, i]

        # Eliminación en otras filas
        for j in range(n):
            if i != j:
                Ab[j] -= Ab[j, i] * Ab[i]

    # Extraer la solución
    x = Ab[:, -1]
    return x

# Definir el sistema de ecuaciones extraído de la imagen
A = np.array([
    [2, 3, -1, 4, -2, 5, -3, 1],
    [-3, 2, 4, -1, -3, -2, 5, -1],
    [4, -1, 2, 3, 3, -6, -2, 5],
    [-1, 5, -2, -3, 4, -6, 2, -3],
    [3, -2, 5, -1, 4, 2, 3, 1],
    [-2, 1, 4, -3, 4, 5, 2, -4],
    [5, -1, 2, -3, 3, 4, -2, 3],
    [1, -3, 4, -2, 5, -6, 2, 3]
], dtype=float)

b = np.array([10, -5, 8, 4, -7, 6, 3, 9], dtype=float)

# Resolver el sistema
solucion = gauss_jordan_pivot_determinante(A, b)

# Imprimir la solución si existe
if solucion is not None:
    print("Solución del sistema:", solucion)

    # Crear una tabla con los resultados
    indices = [f"x{i+1}" for i in range(len(solucion))]
    df_resultados = pd.DataFrame({"Variable": indices, "Valor": solucion})
    print(df_resultados)